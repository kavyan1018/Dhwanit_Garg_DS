DS 
	memory 
	various forms of data storage 
	data - manage and store data


	program => 
			application ->
				450 MB - TB - space   
				Login-> 1.5 minute -> time 

	1) time complexity 	-- time 
	2) space complexity  -- memory 


	algo -> 
		
	mil -> 
		gun , shoot gun , machine gun , sniper gun , tear gas , water gun

	border -> machine gun , sniper gun

	-> gun 	



					DS 

	Linear DS 								Non Linear DS 
	  Array 								       Tree 
	  Stack 								       Graph 	
	  Queue 
      LinkedList 


	search : binary , linear 
	
	sort : bubble , selection , insertion , merge , quick 

---------------------------------------------------------------------------------------------------------------------------------------------------------------
tools -> DS -> 
	program ->  c  c++ java ruby python 

	C -> DS ->   TC , GCC { VS }{code Block }     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------



  	 c -> array -> 
			collection of same type of data type 
			under a single data name we can store n numbers of data items 
			it allocates memory in continuous order 
			you can access array using index [ start 0 and ends with SIZE-1 ] 
			you can access using memory address --pointer 
			
			int a[10]; // 2 *  10 => 20 byte 		
				a[0] : 100 
				a[1] :  102 
				a[2] : 104  

                int a[10]


                0 1 2 3 4 5 6 7 8 9
                2 2 2 2 2 2 2 2 2 2  => 20 byte	
				
			
			10 

			0	1	2	3	4	5	6	7	8	9
			200	300  	70             100  
			
		data? 
		location? 

-------------------------------------------------------------------------------------

Stack :
	->  Linear DS 
	->  LIFO :- Last In First Out
	->  FILO :- First In Last Out

	->  push()  : insert data into Stack
	->  pop()   : delete / remove data from Stack
	->  peek()  : view the top element of Stack
	->  isEmpty(): check whether stack is empty or not
	->  isFull() : check whether stack is full or not

insert  --> push()
delete  --> pop()



Push :-
push(x)
stack is collection of similar data type 

POP :- 
pop()
it will remove top most element from the stack 


peek :- 
it will return top most of the element without removing element from the stack 


isEmpty :- 
if the stack is empty there is no element in stack 

is Full :- 
when stack is full it will return true 